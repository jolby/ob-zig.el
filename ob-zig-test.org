#+Title: a collection of examples for ob-zig tests
#+OPTIONS: ^:nil
* Simple tests
:PROPERTIES:
:ID:       dc04e7e6-da1b-4ab5-9ee9-fd4d2e67dc3e
:END:

#+source: simple
#+begin_src zig :imports '(std) :results silent
  const stdout = std.io.getStdOut().writer();
  try stdout.print("{s}", .{"hello"});
#+end_src

#+source: integer_var
#+begin_src zig :var q=12 :imports '(std) :results silent
  const stdout = std.io.getStdOut().writer();
  try stdout.print("{}", .{q});
#+end_src

#+source: two_var
#+begin_src zig :var p=10 :var q=12 :imports '(std) :results silent
  const stdout = std.io.getStdOut().writer();
  var p_plus_q: isize = p + q;
  try stdout.print("{}", .{p_plus_q});
#+end_src

#+source: string_var
#+begin_src zig :var q="word" :imports '(std) :results silent
  const stdout = std.io.getStdOut().writer();
  try stdout.print("{s} {d}", .{q, q.len});
#+end_src

* Tests zig tests
:PROPERTIES: 
:ID:       b1d3335f-8731-43b8-9246-6e613f3be3a2
:END:
#+source: simple_zig_test
#+begin_src zig :imports '(std) :testsuite 'yes :results silent 
  test "simple test" {
    const stdout = std.io.getStdOut().writer();
    const hello = "hello";

    try std.testing.expectEqual("hello", hello);
    try stdout.print("{s}", .{hello});
  }
#+end_src

#+source: fn_zig_test
#+begin_src zig :imports '(std) :testsuite 'yes :results silent 
  fn helloFn() []const u8 {
      return "hello";
  }

  test "fn test" {
      const stdout = std.io.getStdOut().writer();
      var hello = helloFn();

      try std.testing.expectEqualStrings("hello", hello);
      try stdout.print("{s}", .{hello});
  }
#+end_src

#+source: multi_tests_zig_test
#+begin_src zig :imports '(std) :testsuite 'yes :results silent 
  fn helloFn() []const u8 {
      return "hello";
  }

  test "fn test" {
      const stdout = std.io.getStdOut().writer();
      var hello = helloFn();

      try std.testing.expectEqualStrings("hello", hello);
      try stdout.print("{s}", .{hello});
  }

  test "simple test" {
    const stdout = std.io.getStdOut().writer();
    var hello = "hello";

    try std.testing.expectEqual("hello", hello);
    try stdout.print("{s}", .{hello});
  }
#+end_src

* List var
:PROPERTIES:
:ID:       2df386b8-b2a4-449c-8945-1dacad34e95e
:END:
#+source: list_var
#+begin_src zig :var a='("abc" "def") :imports '(std) :results silent
const stdout = std.io.getStdOut().writer();
try stdout.print("{s}{s}{d}", .{a[0], a[1], a.len});
#+end_src

* Integer table
:PROPERTIES:
:ID:       4a52142b-02e6-416b-a281-dd85c4f69da3
:END:
#+name: int_table
| A | B |
|---+---|
| 1 | 2 |
| 3 | 4 |


#+source: int_table
#+begin_src zig :var int_table=int_table :imports '(std) :results silent

const stdout = std.io.getStdOut().writer();

pub fn main() !void {
    for (int_table) |row| {
        for (row) |field| {
            try stdout.print("{d} ", .{ field });
        }
        try stdout.print("\n", .{});
    }
    try stdout.print("A1 {d}\n", .{int_table_h(1, "A")});
    try stdout.print("B0 {d}\n", .{int_table_h(0, "B")});
}
#+end_src


* Float table
:PROPERTIES:
:ID:       e089fd7b-9634-450d-acb7-36a82168dc30
:END:
#+name: float_table
|   A |   B |
|-----+-----|
| 1.1 | 2.2 |
| 3.5 | 4.7 |

#+source: float_table
#+begin_src zig :var float_table=float_table :imports '(std) :results silent

const stdout = std.io.getStdOut().writer();

pub fn main() !void {
    for (float_table) |row| {
        for (row) |field| {
            try stdout.print("{d} ", .{ field });
        }
        try stdout.print("\n", .{});
    }
    try stdout.print("A1 {d}\n", .{float_table_h(1, "A")});
    try stdout.print("B0 {d}\n", .{float_table_h(0, "B")});
}
#+end_src

* Mixed table
:PROPERTIES:
:ID:       e112bc2e-419a-4890-99c2-7ac4779531cc
:END:

#+name: mixed_table
| day       | quantity |
|-----------+----------|
| monday    |       34 |
| tuesday   |       41 |
| wednesday |       56 |
| thursday  |       17 |
| friday    |       12 |
| saturday  |        7 |
| sunday    |        4 |

#+source: mixed_table
#+begin_src zig :var mixed_table=mixed_table :imports '(std) :results silent

const stdout = std.io.getStdOut().writer();

pub fn main() !void {
    for (mixed_table) |row| {
        for (row) |field| {
            try stdout.print("{s} ", .{ field });
        }
        try stdout.print("\n", .{});
    }
    try stdout.print("tuesday_qty {s}\n", .{mixed_table_h(1, "quantity")});
    try stdout.print("day_idx_4 {s}\n", .{mixed_table_h(4, "day")});
}
#+end_src
